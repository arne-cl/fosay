adjective { type: adjective}

accusative
{
    case: accusative;
}

past-ed
{
    sufix: "ed";
    tense: past;
}

possessive
{
    text: "0>'s";
    transcription: "0>s";
    case: possessive;
}

plural-ss :: accusative
{
    text: "0>s";
    transcription: "0>s";
    real-number: plural;
    number: plural;
}

plural-sz :: accusative
{
    text: "0>s";
    transcription: "0>z";
    real-number: plural;
    number: plural;
}

plural-es :: accusative
{
    text: "0>es";
    transcription: "0>is";
    real-number: plural;
    number: plural;
}

plural-ies :: accusative
{
    text: "1>ies";
    transcription: "1>is";
    real-number: plural;
    number: plural;
}

third-singular-s
{
    text: "0>s";
    transcription: "0>s";
    persone: third;
    number: singular;
}

third-singular-es
{
    text: "0>es";
    transcription: "0>is";
    persone: third;
    number: singular;
}

third-singular-ies
{
    text: "0>ies";
    transcription: "0>is";
    persone: third;
    number: singular;
}

third-plural
{
    persone: third;
    number: plural;
}

second-persone { persone: second; }

ordinal-1
{
    text: "3>first";
    transcription: "3>f?rst";
    num-type: ordinal;
}

ordinal-2
{
    text: "3>second";
    transcription: "2>s?k?nd";
    num-type: ordinal;
}

ordinal-3
{
    text: "5>third";
    transcription: "4>??rd";
    num-type: ordinal;
}

ordinal-ve
{
    text: "2>fth";
    transcription: "1>f?";
    num-type: ordinal;
}

ordinal-t
{
    text: "0>h";
    transcription: "1>?";
    num-type: ordinal;
}

ordinal-e
{
    text: "1>th";
    transcription: "0>?";
    num-type: ordinal;
}

ordinal-y
{
    text: "1>ieth";
    transcription: "0>?";
    num-type: ordinal;
}

ordinal
{
    text: "0>th";
    transcription: "0>?";
    num-type: ordinal;
}

xteen :: ordinal
{
    text: "0>teen";
    transcription: "0>tin";
    lemma: "0>1";
}

xeen :: ordinal
{
    text: "0>een";
    transcription: "0>in";
    lemma: "0>1";
}


every-decimal
{
    text: "0>-one";
    transcription: "0>w?n";
    lemma: "0>1";
}
every-decimal
{
    text: "0>-two";
    transcription: "0>tu";
    lemma: "0>2";
}
every-decimal
{
    text: "0>-three";
    transcription: "0>?ri";
    lemma: "0>3";
}
every-decimal
{
    text: "0>-four";
    transcription: "0>f?r";
    lemma: "0>4";
}
every-decimal
{
    text: "0>-five";
    transcription: "0>fajv";
    lemma: "0>5";
}
every-decimal
{
    text: "0>-six";
    transcription: "0>s?ks";
    lemma: "0>6";
}
every-decimal
{
    text: "0>-seven";
    transcription: "0>s?v?n";
    lemma: "0>7";
}
every-decimal
{
    text: "0>-eight";
    transcription: "0>et";
    lemma: "0>8";
}
every-decimal
{
    text: "0>-nine";
    transcription: "0>najn";
    lemma: "0>9";
}

every-ordinal-decimal
{
    text: "0>-first";
    transcription: "0>f?rst";
    lemma: "0>1";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-second";
    transcription: "0>s?k?nd";
    lemma: "0>2";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-third";
    transcription: "0>??rd";
    lemma: "0>3";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-fourth";
    transcription: "0>f?r?";
    lemma: "0>4";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-fifth";
    transcription: "0>f?f?";
    lemma: "0>5";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-sixth";
    transcription: "0>s?k?";
    lemma: "0>6";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-seventh";
    transcription: "0>s?v?n?";
    lemma: "0>7";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-eighth";
    transcription: "0>et?";
    lemma: "0>8";
    num-type: ordinal;
}
every-ordinal-decimal
{
    text: "0>-ninth";
    transcription: "0>najn?";
    lemma: "0>9";
    num-type: ordinal;
}
//////////////////////////
decimal-t :: every-decimal every-ordinal-decimal
{
    text: "0>y";
    transcription: "0>i";
    lemma: "0>0";
}

decimal :: every-decimal every-ordinal-decimal
{
    text: "0>ty";
    transcription: "0>ti";
    lemma: "0>0";
}
////////////////////////////

present-participle
{
    text: "0>ing";
    transcription: "0>??";
    tense: present;
    participle: participle;
}
